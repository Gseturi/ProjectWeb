@page "/publicchat"
@rendermode InteractiveServer
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable



<div class="chat-container">
    <div class="messages" id="messageArea">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </div>
    <div class="form-group">
        <label>User: <input @bind="userInput" /></label>
    </div>
    <div class="form-group">
        <label>Message: <input @bind="messageInput" /></label>
    </div>
    <button @onclick="Send" disabled="@(IsConnected == false)">Send</button>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/HubEntry"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReciveMessege", (user, message) =>
        {
          
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null && IsConnected)
        {
            await hubConnection.SendAsync("SendMessege", userInput, messageInput);
        }
    }


    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}